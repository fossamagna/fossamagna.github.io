"use strict";(self.webpackChunkfossamagna_github_io=self.webpackChunkfossamagna_github_io||[]).push([[275],{5079:function(n,a,s){s.r(a),s.d(a,{Head:function(){return m},default:function(){return g}});var e=s(3366),t=s(6410),p=s(7294);function o(n){var a=Object.assign({p:"p",sup:"sup",a:"a",h2:"h2",strong:"strong",div:"div",code:"code",h3:"h3",ul:"ul",li:"li",section:"section",ol:"ol"},(0,t.ah)(),n.components);return p.createElement(p.Fragment,null,p.createElement(a.p,null,"住所を入力するフォームでよくある、郵便番号を入力すると住所が補完される例の機能（以降は、郵便番号検索とします）を実装する必要があったのAmazon Location Serviceが使えないか調べてみました。"),"\n",p.createElement(a.p,null,"郵便番号検索のSaaSとして、",p.createElement(a.sup,null,p.createElement(a.a,{href:"#user-content-fn-1",id:"user-content-fnref-1","data-footnote-ref":!0,"aria-describedby":"footnote-label"},"1")),"様々なサービスがありますが、AWSで環境を揃えたいなどの理由もありAmazon Location Serviceに白羽の矢が立ちました。"),"\n",p.createElement(a.p,null,"Amazon Location Serviceでの郵便番号検索には",p.createElement(a.a,{href:"https://docs.aws.amazon.com/location/latest/developerguide/search-place-index-geocoding.html"},"Geocoding"),"の",p.createElement(a.a,{href:"https://docs.aws.amazon.com/location-places/latest/APIReference/API_SearchPlaceIndexForText.html"},"SearchPlaceIndexForText"),"を利用します。"),"\n",p.createElement(a.h2,{id:"placeindexの作成"},"PlaceIndexの作成"),"\n",p.createElement(a.p,null,"まず、「場所インデックス」を作成します。次のコマンドを実行すると「場所インデックス」を作成できます。\nマネージメントコンソールから作成しても大丈夫ですが、",p.createElement(a.strong,null,"データプロバイダーとして必ず",p.createElement(a.sup,null,p.createElement(a.a,{href:"#user-content-fn-2",id:"user-content-fnref-2","data-footnote-ref":!0,"aria-describedby":"footnote-label"},"2")),p.createElement(a.a,{href:"https://aws.amazon.com/jp/location/data-providers/here-technologies/"},"Here"),"を選択してください。")),"\n",p.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="sh"><pre class="language-sh"><code class="language-sh">$ aws location create-place-index\n    --data-source Here <span class="token punctuation">\\</span>\n    <span class="token parameter variable">--description</span> <span class="token string">"PostalCode Index"</span> <span class="token punctuation">\\</span>\n    --index-name PostalCodePlaceIndex</code></pre></div>'}}),"\n",p.createElement(a.h2,{id:"searchplaceindexfortextで検索"},"SearchPlaceIndexForTextで検索"),"\n",p.createElement(a.p,null,"「場所インデックス」が作成できたら、早速郵便番号検索をしてみます。今回はAWS CLIを使って検索してみました。"),"\n",p.createElement(a.p,null,"検索は次のコマンドを実行して行います。郵便番号は",p.createElement(a.code,null,"--text"),"オプションで指定します。\n検索結果には日本だけを含むようにしたいので",p.createElement(a.code,null,"--filter-countries JPN"),"オプションも指定しています。"),"\n",p.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="sh"><pre class="language-sh"><code class="language-sh">$ aws location search-place-index-for-text <span class="token punctuation">\\</span>\n  --index-name PostalCodePlaceIndex <span class="token punctuation">\\</span>\n  <span class="token parameter variable">--language</span> ja <span class="token punctuation">\\</span>\n  --filter-countries JPN <span class="token punctuation">\\</span>\n  <span class="token parameter variable">--text</span> <span class="token operator">&lt;</span>postalCode<span class="token operator">></span></code></pre></div>'}}),"\n",p.createElement(a.h3,{id:"市区町村パターン"},"市区町村パターン"),"\n",p.createElement(a.p,null,"最初に、郵便番号",p.createElement(a.code,null,"1010041"),"(",p.createElement(a.code,null,"東京都千代田区神田須田町"),")を検索してみます"),"\n",p.createElement(a.p,null,"結果は、次のように",p.createElement(a.code,null,"Results.Place"),"に",p.createElement(a.code,null,"東京都千代田区神田須田町"),"が含まれています。\nレスポンス内の",p.createElement(a.code,null,"Place"),"オブジェクトの各属性が住所フィールドの補完に利用できそうです。"),"\n",p.createElement(a.p,null,"それぞれの見ていくと、以下のような構成になっているようです。",p.createElement(a.a,{href:"https://docs.aws.amazon.com/location-places/latest/APIReference/API_Place.html"},"公式ドキュメントのPlace"),"の記述と照らし合わせても一致します。"),"\n",p.createElement(a.ul,null,"\n",p.createElement(a.li,null,"Label: 郵便番号を含む住所全体"),"\n",p.createElement(a.li,null,"Municipality: 市区町村"),"\n",p.createElement(a.li,null,"PostalCode: 郵便番号"),"\n",p.createElement(a.li,null,"Region: 都道府県"),"\n"),"\n",p.createElement(a.p,null,"ただ、",p.createElement(a.code,null,"神田須田町"),"だけを持った属性はなさそうです。レスポンスの値を住所フィールドの補完に利用する際に",p.createElement(a.code,null,"神田須田町"),"（所謂、町域名）の部分は",p.createElement(a.code,null,"Label"),"から抽出する必要がありそうです。"),"\n",p.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n    <span class="token property">"Results"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n            <span class="token property">"Place"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                <span class="token property">"Country"</span><span class="token operator">:</span> <span class="token string">"JPN"</span><span class="token punctuation">,</span>\n                <span class="token property">"Geometry"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                    <span class="token property">"Point"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n                        <span class="token number">139.77105</span><span class="token punctuation">,</span>\n                        <span class="token number">35.69593</span>\n                    <span class="token punctuation">]</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token property">"Interpolated"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n                <span class="token property">"Label"</span><span class="token operator">:</span> <span class="token string">"〒101-0041 東京都千代田区神田須田町"</span><span class="token punctuation">,</span>\n                <span class="token property">"Municipality"</span><span class="token operator">:</span> <span class="token string">"千代田区"</span><span class="token punctuation">,</span>\n                <span class="token property">"PostalCode"</span><span class="token operator">:</span> <span class="token string">"101-0041"</span><span class="token punctuation">,</span>\n                <span class="token property">"Region"</span><span class="token operator">:</span> <span class="token string">"東京都"</span><span class="token punctuation">,</span>\n                <span class="token property">"TimeZone"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                    <span class="token property">"Name"</span><span class="token operator">:</span> <span class="token string">"Asia/Tokyo"</span><span class="token punctuation">,</span>\n                    <span class="token property">"Offset"</span><span class="token operator">:</span> <span class="token number">32400</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">"Summary"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">"DataSource"</span><span class="token operator">:</span> <span class="token string">"Here"</span><span class="token punctuation">,</span>\n        <span class="token property">"FilterCountries"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token string">"JPN"</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token property">"Language"</span><span class="token operator">:</span> <span class="token string">"ja"</span><span class="token punctuation">,</span>\n        <span class="token property">"MaxResults"</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n        <span class="token property">"ResultBBox"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token number">139.77105</span><span class="token punctuation">,</span>\n            <span class="token number">35.69593</span><span class="token punctuation">,</span>\n            <span class="token number">139.77105</span><span class="token punctuation">,</span>\n            <span class="token number">35.69593</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token property">"Text"</span><span class="token operator">:</span> <span class="token string">"1010041"</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.h3,{id:"郡パターン"},"郡パターン"),"\n",p.createElement(a.p,null,p.createElement(a.code,null,"○○郡xx町"),"というような住所のパターンの検索です。ここでは郵便番号",p.createElement(a.code,null,"1901211"),"(",p.createElement(a.code,null,"東京都西多摩郡瑞穂町石畑"),")を検索してみます。\nコマンドは",p.createElement(a.code,null,"--text"),"オプションに指定する郵便番号以外は直前のものと同じになるので、以降の記載は省略します。"),"\n",p.createElement(a.p,null,"結果は次の通りです。先程と違い",p.createElement(a.code,null,"SubRegion"),"という属性が存在しています。値は",p.createElement(a.code,null,"西多摩郡"),"です。",p.createElement(a.code,null,"SubRegion"),"が",p.createElement(a.code,null,"○○郡"),"の部分に該当するようです。"),"\n",p.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n    <span class="token property">"Results"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n            <span class="token property">"Place"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                <span class="token property">"Country"</span><span class="token operator">:</span> <span class="token string">"JPN"</span><span class="token punctuation">,</span>\n                <span class="token property">"Geometry"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                    <span class="token property">"Point"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n                        <span class="token number">139.35873</span><span class="token punctuation">,</span>\n                        <span class="token number">35.76639</span>\n                    <span class="token punctuation">]</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token property">"Interpolated"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n                <span class="token property">"Label"</span><span class="token operator">:</span> <span class="token string">"〒190-1211 東京都西多摩郡瑞穂町石畑"</span><span class="token punctuation">,</span>\n                <span class="token property">"Municipality"</span><span class="token operator">:</span> <span class="token string">"瑞穂町"</span><span class="token punctuation">,</span>\n                <span class="token property">"PostalCode"</span><span class="token operator">:</span> <span class="token string">"190-1211"</span><span class="token punctuation">,</span>\n                <span class="token property">"Region"</span><span class="token operator">:</span> <span class="token string">"東京都"</span><span class="token punctuation">,</span>\n                <span class="token property">"SubRegion"</span><span class="token operator">:</span> <span class="token string">"西多摩郡"</span><span class="token punctuation">,</span>\n                <span class="token property">"TimeZone"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                    <span class="token property">"Name"</span><span class="token operator">:</span> <span class="token string">"Asia/Tokyo"</span><span class="token punctuation">,</span>\n                    <span class="token property">"Offset"</span><span class="token operator">:</span> <span class="token number">32400</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">"Summary"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">"DataSource"</span><span class="token operator">:</span> <span class="token string">"Here"</span><span class="token punctuation">,</span>\n        <span class="token property">"FilterCountries"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token string">"JPN"</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token property">"Language"</span><span class="token operator">:</span> <span class="token string">"ja"</span><span class="token punctuation">,</span>\n        <span class="token property">"MaxResults"</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n        <span class="token property">"ResultBBox"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token number">139.35873</span><span class="token punctuation">,</span>\n            <span class="token number">35.76639</span><span class="token punctuation">,</span>\n            <span class="token number">139.35873</span><span class="token punctuation">,</span>\n            <span class="token number">35.76639</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token property">"Text"</span><span class="token operator">:</span> <span class="token string">"1901211"</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.h3,{id:"行政区パターン"},"行政区パターン"),"\n",p.createElement(a.p,null,"次に",p.createElement(a.code,null,"札幌市中央区"),"のような特別区以外の区（所謂、行政区）の郵便番号",p.createElement(a.code,null,"0600035"),"(",p.createElement(a.code,null,"北海道札幌市中央区北5条東"),")を検索してみます。"),"\n",p.createElement(a.p,null,"結果は次の通りです。",p.createElement(a.code,null,"Neighborhood"),"という属性が存在しています。値は",p.createElement(a.code,null,"中央区"),"です。、",p.createElement(a.code,null,"Neighborhood"),"が行政区の部分に相当しそうです。"),"\n",p.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n    <span class="token property">"Results"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n            <span class="token property">"Place"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                <span class="token property">"Country"</span><span class="token operator">:</span> <span class="token string">"JPN"</span><span class="token punctuation">,</span>\n                <span class="token property">"Geometry"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                    <span class="token property">"Point"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n                        <span class="token number">141.35752</span><span class="token punctuation">,</span>\n                        <span class="token number">43.06827</span>\n                    <span class="token punctuation">]</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token property">"Interpolated"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n                <span class="token property">"Label"</span><span class="token operator">:</span> <span class="token string">"〒060-0035 北海道札幌市中央区北5条東"</span><span class="token punctuation">,</span>\n                <span class="token property">"Municipality"</span><span class="token operator">:</span> <span class="token string">"札幌市"</span><span class="token punctuation">,</span>\n                <span class="token property">"Neighborhood"</span><span class="token operator">:</span> <span class="token string">"中央区"</span><span class="token punctuation">,</span>\n                <span class="token property">"PostalCode"</span><span class="token operator">:</span> <span class="token string">"060-0035"</span><span class="token punctuation">,</span>\n                <span class="token property">"Region"</span><span class="token operator">:</span> <span class="token string">"北海道"</span><span class="token punctuation">,</span>\n                <span class="token property">"TimeZone"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n                    <span class="token property">"Name"</span><span class="token operator">:</span> <span class="token string">"Asia/Tokyo"</span><span class="token punctuation">,</span>\n                    <span class="token property">"Offset"</span><span class="token operator">:</span> <span class="token number">32400</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">"Summary"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">"DataSource"</span><span class="token operator">:</span> <span class="token string">"Here"</span><span class="token punctuation">,</span>\n        <span class="token property">"FilterCountries"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token string">"JPN"</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token property">"Language"</span><span class="token operator">:</span> <span class="token string">"ja"</span><span class="token punctuation">,</span>\n        <span class="token property">"MaxResults"</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n        <span class="token property">"ResultBBox"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token number">141.35752</span><span class="token punctuation">,</span>\n            <span class="token number">43.06827</span><span class="token punctuation">,</span>\n            <span class="token number">141.35752</span><span class="token punctuation">,</span>\n            <span class="token number">43.06827</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token property">"Text"</span><span class="token operator">:</span> <span class="token string">"0600035"</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"ここまでの結果から、",p.createElement(a.code,null,"Place"),"の属性と日本の住所の構成要素は以下のようマッピングできそうです。"),"\n",p.createElement(a.ul,null,"\n",p.createElement(a.li,null,"PostalCode: 郵便番号"),"\n",p.createElement(a.li,null,"Region: 都道府県"),"\n",p.createElement(a.li,null,"SubRegion: 郡"),"\n",p.createElement(a.li,null,"Municipality: 市区町村"),"\n",p.createElement(a.li,null,"Neighborhood: 行政区(特別区除く)"),"\n",p.createElement(a.li,null,"Label: 郵便番号を含む住所全体"),"\n"),"\n",p.createElement(a.p,null,"また、それぞれの属性値を結合するような場合は、住所文字列をとしても上記の順番でよさそうです。"),"\n",p.createElement(a.h2,{id:"その他のパターン"},"その他のパターン"),"\n",p.createElement(a.p,null,"さらに、もう少し別のパターンも検索してみます。"),"\n",p.createElement(a.p,null,"個別の郵便番号が設定されている高層ビルのパターンはどうでしょう。郵便番号",p.createElement(a.code,null,"1006001"),"(",p.createElement(a.code,null,"東京都千代田区霞が関霞が関ビル（１階）"),")を検索してみます。\n結果は次の通りです。結果は0件です。すべての検証したわけではありませんが高層ビルなどの建物の階毎に割り振られた郵便番号では検索できないようです。\nこの他にも、",p.createElement(a.code,null,"1001701"),"(",p.createElement(a.code,null,"東京都青ヶ島村"),")などいくつかの郵便番号で検索結果が0件になりました。他の離島",p.createElement(a.sup,null,p.createElement(a.a,{href:"#user-content-fn-3",id:"user-content-fnref-3","data-footnote-ref":!0,"aria-describedby":"footnote-label"},"3")),"では検索できる郵便番号もあるので、離島だから必ず検索できないわけではないようです。検索できるかできないかはデータプロバイダーが提供するデータ次第になりそうです。"),"\n",p.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n    <span class="token property">"Results"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">"Summary"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">"DataSource"</span><span class="token operator">:</span> <span class="token string">"Here"</span><span class="token punctuation">,</span>\n        <span class="token property">"FilterCountries"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token string">"JPN"</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token property">"Language"</span><span class="token operator">:</span> <span class="token string">"ja"</span><span class="token punctuation">,</span>\n        <span class="token property">"MaxResults"</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n        <span class="token property">"Text"</span><span class="token operator">:</span> <span class="token string">"1006001"</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.h2,{id:"まとめ"},"まとめ"),"\n",p.createElement(a.ul,null,"\n",p.createElement(a.li,null,"PlaceIndexには",p.createElement(a.code,null,"Here"),"を使う。"),"\n",p.createElement(a.li,null,p.createElement(a.code,null,"Place"),"の属性と日本の住所のマッピングはこれ。","\n",p.createElement(a.ul,null,"\n",p.createElement(a.li,null,"PostalCode: 郵便番号"),"\n",p.createElement(a.li,null,"Region: 都道府県"),"\n",p.createElement(a.li,null,"SubRegion: 郡"),"\n",p.createElement(a.li,null,"Municipality: 市区町村"),"\n",p.createElement(a.li,null,"Neighborhood: 行政区(特別区除く)"),"\n",p.createElement(a.li,null,"Label: 郵便番号を含む住所全体"),"\n"),"\n"),"\n",p.createElement(a.li,null,"検索できない郵便番号もある（データプロバイダーが提供するデータ次第）。"),"\n"),"\n",p.createElement(a.p,null,"以上から、郵便番号検索にAmazon Location Serviceを採用するかは要件次第になると思います。\n存在する郵便番号を完全に網羅しているわけではないので、その点が重要であれば少なくとも現時点では別の方法（別のSaaS、自前でデータ管理）を採用するのが良さそうです。\n一方、一部検索できない郵便番号があることが許容できるのであれば、AWS上で郵便番号検索を簡単に実装できる選択肢になると思います。データの更新はデータプロバイダーにお任せできる点も自前データ管理と比較するとメリットになりますし、Google Mapsと比較しても料金はAWSがお得になりそうです。"),"\n",p.createElement(a.section,{"data-footnotes":!0,className:"footnotes"},p.createElement(a.h2,{className:"sr-only",id:"footnote-label"},"脚注"),"\n",p.createElement(a.ol,null,"\n",p.createElement(a.li,{id:"user-content-fn-1"},"\n",p.createElement(a.p,null,p.createElement(a.a,{href:"https://developers.google.com/maps/documentation/geocoding/requests-geocoding"},"Google MapsのGeocofing API"),"や",p.createElement(a.a,{href:"https://kenall.jp/features/postalcode"},"ケンオール"),"などがあります。 ",p.createElement(a.a,{href:"#user-content-fnref-1","data-footnote-backref":!0,className:"data-footnote-backref","aria-label":"Back to content"},"↩")),"\n"),"\n",p.createElement(a.li,{id:"user-content-fn-2"},"\n",p.createElement(a.p,null,"データプロバイダーとして",p.createElement(a.code,null,"Here"),"以外に",p.createElement(a.a,{href:"https://aws.amazon.com/jp/location/data-providers/esri/"},"Esri"),"もありますが、",p.createElement(a.code,null,"Esri"),"では日本の郵便番号での検索はできませんでした(どの郵便番号でも結果が0件でした)。 ",p.createElement(a.a,{href:"#user-content-fnref-2","data-footnote-backref":!0,className:"data-footnote-backref","aria-label":"Back to content"},"↩")),"\n"),"\n",p.createElement(a.li,{id:"user-content-fn-3"},"\n",p.createElement(a.p,null,"離島でも",p.createElement(a.code,null,"9980281"),"(",p.createElement(a.code,null,"山形県酒田市飛島"),")は検索結果を取得できました。 ",p.createElement(a.a,{href:"#user-content-fnref-3","data-footnote-backref":!0,className:"data-footnote-backref","aria-label":"Back to content"},"↩")),"\n"),"\n"),"\n"))}var l=function(n){void 0===n&&(n={});var a=Object.assign({},(0,t.ah)(),n.components).wrapper;return a?p.createElement(a,n,p.createElement(o,n)):o(n)},c=s(1597),r=s(8771),u=s(5297),i=s(746),k=["data"],m=function(n){var a=n.data,s=(0,e.Z)(n,k),t=a.mdx;return p.createElement(i.F,Object.assign({data:a,title:t.frontmatter.title,description:t.frontmatter.description||t.excerpt},s))},d=function(n){var a,s=n.data,e=n.location,t=n.children,o=s.mdx,l=(null===(a=s.site.siteMetadata)||void 0===a?void 0:a.title)||"Title",i=s.previous,k=s.next;return p.createElement(u.Z,{location:e,title:l},p.createElement("article",{className:"blog-post",itemScope:!0,itemType:"http://schema.org/Article"},p.createElement("header",null,p.createElement("h1",{itemProp:"headline"},o.frontmatter.title),p.createElement("p",null,o.frontmatter.date)),t,p.createElement("hr"),p.createElement("footer",null,p.createElement(r.Z))),p.createElement("nav",{className:"blog-post-nav"},p.createElement("ul",{style:{display:"flex",flexWrap:"wrap",justifyContent:"space-between",listStyle:"none",padding:0}},p.createElement("li",null,i&&p.createElement(c.Link,{to:i.fields.slug,rel:"prev"}," ← ",i.frontmatter.title)),p.createElement("li",null,k&&p.createElement(c.Link,{to:k.fields.slug,rel:"next"},k.frontmatter.title," →")))))};function g(n){return p.createElement(d,n,p.createElement(l,n))}},3366:function(n,a,s){function e(n,a){if(null==n)return{};var s,e,t={},p=Object.keys(n);for(e=0;e<p.length;e++)s=p[e],a.indexOf(s)>=0||(t[s]=n[s]);return t}s.d(a,{Z:function(){return e}})}}]);
//# sourceMappingURL=component---src-templates-blog-post-js-content-file-path-home-runner-work-fossamagna-github-io-fossamagna-github-io-content-blog-search-by-postal-code-with-amazon-location-service-index-mdx-df589d6a4f68bf2f250d.js.map