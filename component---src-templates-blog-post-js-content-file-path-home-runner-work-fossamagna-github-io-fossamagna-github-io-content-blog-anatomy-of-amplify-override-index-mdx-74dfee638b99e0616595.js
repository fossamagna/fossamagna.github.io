"use strict";(self.webpackChunkfossamagna_github_io=self.webpackChunkfossamagna_github_io||[]).push([[709],{1787:function(n,a,s){s.r(a),s.d(a,{Head:function(){return d},default:function(){return f}});var t=s(3366),e=s(6410),p=s(7294);function o(n){var a=Object.assign({p:"p",a:"a",h2:"h2",sup:"sup",code:"code",ul:"ul",li:"li",h3:"h3",div:"div",ol:"ol",h4:"h4",section:"section"},(0,e.ah)(),n.components);return p.createElement(p.Fragment,null,p.createElement(a.p,null,"この記事は ",p.createElement(a.a,{href:"https://qiita.com/advent-calendar/2021/amplify"},"AWS Amplify Advent Calendar 2021")," と ",p.createElement(a.a,{href:"https://adventar.org/calendars/6972"},"ESM Advent Calendar 2021")," の 20 日目の記事です。"),"\n",p.createElement(a.p,null,"Amplify CLI v7.3.0 で CDK オーバーライドの機能が提供されました。かなり熱い機能です。\nAmplify の CDK オーバーライドはどうやって実装されているのかを調べたので紹介します。"),"\n",p.createElement(a.h2,{id:"どうして-cdk-オーバーライドを調べたのか"},"どうして CDK オーバーライドを調べたのか"),"\n",p.createElement(a.p,null,p.createElement(a.a,{href:"https://github.com/fossamagna/amplify-category-console-notification"},"amplify-category-console-notification"),p.createElement(a.sup,null,p.createElement(a.a,{href:"#user-content-fn-1",id:"user-content-fnref-1","data-footnote-ref":!0,"aria-describedby":"footnote-label"},"1")),"という amplfy プラグインを公開しているですが、\nそのプラグインでも",p.createElement(a.code,null,"amplify console-notification override"),"のように利用者が設定を上書きできる機能を提供したいというのが動機です。\nそのため、CDK オーバーライドを実装するにはどうすればいいのか？を把握することを目的に実装がどうなっているのかを紹介します。\nなお、この記事では",p.createElement(a.a,{href:"https://github.com/aws-amplify/amplify-cli/releases/tag/v7.6.3"},"amplify cli v7.6.3"),"を対象に調べています。"),"\n",p.createElement(a.h2,{id:"オーバーライドとは"},"オーバーライドとは"),"\n",p.createElement(a.p,null,"そもそも、「Amplify CDK オーバーライドとは何か」ですが、Amplify が生成するバックエンドリソース（の一部）を CDK でカスタマイズできる機能です。今までは生成された CloudFormation テンプレートの JSON ファイルを直接編集してカスタマイズしていたのを CDK を利用してカスタマイズできるようになったというものです。\n詳しくは",p.createElement(a.a,{href:"https://aws.amazon.com/jp/blogs/news/override-amplify-generated-backend-resources-using-cdk/"},"Amplify で生成されたバックエンドリソースを CDK でカスタマイズする新機能 「オーバーライド」のご紹介"),"という Amazon Web Services ブログの記事を読んでいただくと一通り把握できると思います。"),"\n",p.createElement(a.h2,{id:"どうなってる"},"どうなってる？"),"\n",p.createElement(a.p,null,"次の 2 点がどうなっているかを調べるとサードパーティプラグインで CDK オーバーライドを提供（実装）できるのではないかと考えました。"),"\n",p.createElement(a.ul,null,"\n",p.createElement(a.li,null,p.createElement(a.code,null,"amplify override")," はどう実装されているか"),"\n",p.createElement(a.li,null,p.createElement(a.code,null,"amplify push")," でカテゴリープラグインのどの API が呼び出されているのか(カテゴリープラグインはどの API を実装すればいいのか)"),"\n"),"\n",p.createElement(a.p,null,"そこで、この 2 点についてどう実装されているのか見ていきます。\namplify では overide は",p.createElement(a.code,null,"auth"),", ",p.createElement(a.code,null,"storage"),", ",p.createElement(a.code,null,"api"),"のカテゴリーで提供されていますが、ここでは",p.createElement(a.code,null,"storage"),"カテゴリーに絞って探っていきたいと思います。"),"\n",p.createElement(a.h3,{id:"amplify-category-override-の実装を見る"},p.createElement(a.code,null,"amplify category override")," の実装を見る"),"\n",p.createElement(a.p,null,"オーバーライドを利用するにはまず次のコマンドを実行します。"),"\n",p.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash">$ amplify storage override</code></pre></div>'}}),"\n",p.createElement(a.p,null,"このコマンドを実行すると、",p.createElement(a.code,null,"storage"),"カテゴリーのどのリソースをオーバーライドするのかユーザーに問い合わせてから、以下のコードが呼び出されます。"),"\n",p.createElement(a.p,null,p.createElement(a.a,{href:"https://github.com/aws-amplify/amplify-cli/blob/dacdff9136a385ca99797fffb45e810d8f378568/packages/amplify-category-storage/src/commands/storage/override.ts#L58-L83"},"amplify-category-storage/src/commands/storage/override.ts#L58-L83"),":"),"\n",p.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts">  <span class="token comment">// Make sure to migrate first</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>amplifyMeta<span class="token punctuation">[</span>AmplifyCategories<span class="token punctuation">.</span><span class="token constant">STORAGE</span><span class="token punctuation">]</span><span class="token punctuation">[</span>selectedResourceName<span class="token punctuation">]</span><span class="token punctuation">.</span>service <span class="token operator">===</span> AmplifySupportedService<span class="token punctuation">.</span><span class="token constant">DYNAMODB</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> resourceInputState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DynamoDBInputState</span><span class="token punctuation">(</span>selectedResourceName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>resourceInputState<span class="token punctuation">.</span><span class="token function">cliInputFileExists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">await</span> prompter<span class="token punctuation">.</span><span class="token function">yesOrNo</span><span class="token punctuation">(</span><span class="token function">getMigrateResourceMessageForOverride</span><span class="token punctuation">(</span>AmplifyCategories<span class="token punctuation">.</span><span class="token constant">STORAGE</span><span class="token punctuation">,</span> selectedResourceName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        resourceInputState<span class="token punctuation">.</span><span class="token function">migrate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> stackGenerator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DDBStackTransform</span><span class="token punctuation">(</span>selectedResourceName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">await</span> stackGenerator<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>amplifyMeta<span class="token punctuation">[</span>AmplifyCategories<span class="token punctuation">.</span><span class="token constant">STORAGE</span><span class="token punctuation">]</span><span class="token punctuation">[</span>selectedResourceName<span class="token punctuation">]</span><span class="token punctuation">.</span>service <span class="token operator">===</span> AmplifySupportedService<span class="token punctuation">.</span><span class="token constant">S3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> s3ResourceInputState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">S3InputState</span><span class="token punctuation">(</span>selectedResourceName<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s3ResourceInputState<span class="token punctuation">.</span><span class="token function">cliInputFileExists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">await</span> prompter<span class="token punctuation">.</span><span class="token function">yesOrNo</span><span class="token punctuation">(</span><span class="token function">getMigrateResourceMessageForOverride</span><span class="token punctuation">(</span>AmplifyCategories<span class="token punctuation">.</span><span class="token constant">STORAGE</span><span class="token punctuation">,</span> selectedResourceName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">await</span> s3ResourceInputState<span class="token punctuation">.</span><span class="token function">migrate</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//migrate auth and storage config resources</span>\n        <span class="token keyword">const</span> stackGenerator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AmplifyS3ResourceStackTransform</span><span class="token punctuation">(</span>selectedResourceName<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        stackGenerator<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>CLISubCommandType<span class="token punctuation">.</span><span class="token constant">MIGRATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">await</span> <span class="token function">generateOverrideSkeleton</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> srcPath<span class="token punctuation">,</span> destPath<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"何をしているのか確認してみます。\nストレージの種類が DynamoDB か S3 かで分岐していますが、どちらも同じような処理を行っているので、DynamoDB の方を見てみます。"),"\n",p.createElement(a.p,null,"やっていることは次の処理です。"),"\n",p.createElement(a.ol,null,"\n",p.createElement(a.li,null,"マイグレーションが必要かをチェックします。"),"\n",p.createElement(a.li,null,"ファイルがなければユーザに問い合わせた後にマイグレーションを実行します。"),"\n",p.createElement(a.li,null,"マイグレーションで生成したファイルをもとに CDK スタックから Cfn テンプレートを作成します。"),"\n",p.createElement(a.li,null,"最後に",p.createElement(a.code,null,"generateOverrideSkeleton"),"関数を実行します。"),"\n"),"\n",p.createElement(a.p,null,"マイグレーションの必要性のチェック、マイグレーションの実行は",p.createElement(a.code,null,"DynamoDBInputState"),p.createElement(a.sup,null,p.createElement(a.a,{href:"#user-content-fn-2",id:"user-content-fnref-2","data-footnote-ref":!0,"aria-describedby":"footnote-label"},"2")),"というクラスに実装されています。\nマイグレーションが必要かのチェックですが、",p.createElement(a.code,null,"cliInputFileExists"),"関数がその役割です。",p.createElement(a.code,null,"cli-input.json"),p.createElement(a.sup,null,p.createElement(a.a,{href:"#user-content-fn-3",id:"user-content-fnref-3","data-footnote-ref":!0,"aria-describedby":"footnote-label"},"3")),"ファイルの有無でマイグレーションが必要であるか判断しています。"),"\n",p.createElement(a.p,null,p.createElement(a.a,{href:"https://github.com/aws-amplify/amplify-cli/blob/dacdff9136a385ca99797fffb45e810d8f378568/packages/amplify-category-storage/src/provider-utils/awscloudformation/service-walkthroughs/dynamoDB-input-state.ts#L47-L49"},"amplify-category-storage/src/provider-utils/awscloudformation/service-walkthroughs/dynamoDB-input-state.ts#L47-L49"),":"),"\n",p.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts">  <span class="token keyword">public</span> <span class="token function">cliInputFileExists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_cliInputsFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"マイグレーションは",p.createElement(a.code,null,"migrate"),"関数に実装されています。マイグレーションでは既存の",p.createElement(a.code,null,"parameters.json"),",Cfn テンプレートファイル,",p.createElement(a.code,null,"storage-params.json"),"を読み込んで",p.createElement(a.code,null,"cli-input.json"),"を作成します。\nそして、既存のファイルを削除します。"),"\n",p.createElement(a.p,null,p.createElement(a.a,{href:"https://github.com/aws-amplify/amplify-cli/blob/dacdff9136a385ca99797fffb45e810d8f378568/packages/amplify-category-storage/src/provider-utils/awscloudformation/service-walkthroughs/dynamoDB-input-state.ts#L71-L161"},"amplify-category-storage/src/provider-utils/awscloudformation/service-walkthroughs/dynamoDB-input-state.ts#L71-L161"),":"),"\n",p.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts">  <span class="token keyword">public</span> <span class="token function">migrate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> cliInputs<span class="token operator">:</span> DynamoDBCLIInputs<span class="token punctuation">;</span>\n\n    <span class="token comment">// migrate the resource to new directory structure if cli-inputs.json is not found for the resource</span>\n\n    <span class="token keyword">const</span> backendDir <span class="token operator">=</span> pathManager<span class="token punctuation">.</span><span class="token function">getBackendDirPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> oldParametersFilepath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>backendDir<span class="token punctuation">,</span> <span class="token string">\'storage\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_resourceName<span class="token punctuation">,</span> <span class="token string">\'parameters.json\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> oldCFNFilepath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>backendDir<span class="token punctuation">,</span> <span class="token string">\'storage\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_resourceName<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>_resourceName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-cloudformation-template.json</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> oldStorageParamsFilepath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>backendDir<span class="token punctuation">,</span> <span class="token string">\'storage\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_resourceName<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">storage-params.json</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> oldParameters <span class="token operator">=</span> JSONUtilities<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">readJson</span><span class="token generic class-name"><span class="token operator">&lt;</span>$TSAny<span class="token operator">></span></span></span><span class="token punctuation">(</span>oldParametersFilepath<span class="token punctuation">,</span> <span class="token punctuation">{</span> throwIfNotExist<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> oldCFN <span class="token operator">=</span> JSONUtilities<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">readJson</span><span class="token generic class-name"><span class="token operator">&lt;</span>$TSAny<span class="token operator">></span></span></span><span class="token punctuation">(</span>oldCFNFilepath<span class="token punctuation">,</span> <span class="token punctuation">{</span> throwIfNotExist<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> oldStorageParams <span class="token operator">=</span> JSONUtilities<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">readJson</span><span class="token generic class-name"><span class="token operator">&lt;</span>$TSAny<span class="token operator">></span></span></span><span class="token punctuation">(</span>oldStorageParamsFilepath<span class="token punctuation">,</span> <span class="token punctuation">{</span> throwIfNotExist<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> partitionKey <span class="token operator">=</span> <span class="token punctuation">{</span>\n      fieldName<span class="token operator">:</span> oldParameters<span class="token punctuation">.</span>partitionKeyName<span class="token punctuation">,</span>\n      fieldType<span class="token operator">:</span> <span class="token function">getFieldType</span><span class="token punctuation">(</span>oldParameters<span class="token punctuation">.</span>partitionKeyType<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">let</span> sortKey<span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldParameters<span class="token punctuation">.</span>sortKeyName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      sortKey <span class="token operator">=</span> <span class="token punctuation">{</span>\n        fieldName<span class="token operator">:</span> oldParameters<span class="token punctuation">.</span>sortKeyName<span class="token punctuation">,</span>\n        fieldType<span class="token operator">:</span> <span class="token function">getFieldType</span><span class="token punctuation">(</span>oldParameters<span class="token punctuation">.</span>sortKeyType<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">let</span> triggerFunctions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStorageParams<span class="token punctuation">.</span>triggerFunctions<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      triggerFunctions <span class="token operator">=</span> oldStorageParams<span class="token punctuation">.</span>triggerFunctions<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">const</span> <span class="token function-variable function">getType</span> <span class="token operator">=</span> <span class="token punctuation">(</span>attrList<span class="token operator">:</span> $TSAny<span class="token punctuation">,</span> attrName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> attrType<span class="token punctuation">;</span>\n\n      attrList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>attr<span class="token operator">:</span> $TSAny<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>attr<span class="token punctuation">.</span>AttributeName <span class="token operator">===</span> attrName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          attrType <span class="token operator">=</span> <span class="token function">getFieldType</span><span class="token punctuation">(</span>attr<span class="token punctuation">.</span>AttributeType<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token keyword">return</span> attrType<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">let</span> gsi<span class="token operator">:</span> DynamoDBCLIInputsGSIType<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCFN<span class="token operator">?.</span>Resources<span class="token operator">?.</span>DynamoDBTable<span class="token operator">?.</span>Properties<span class="token operator">?.</span>GlobalSecondaryIndexes<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      oldCFN<span class="token punctuation">.</span>Resources<span class="token punctuation">.</span>DynamoDBTable<span class="token punctuation">.</span>Properties<span class="token punctuation">.</span>GlobalSecondaryIndexes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cfnGSIValue<span class="token operator">:</span> $TSAny<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> gsiValue<span class="token operator">:</span> $TSAny <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token punctuation">(</span>gsiValue<span class="token punctuation">.</span>name <span class="token operator">=</span> cfnGSIValue<span class="token punctuation">.</span>IndexName<span class="token punctuation">)</span><span class="token punctuation">,</span>\n          cfnGSIValue<span class="token punctuation">.</span>KeySchema<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>keySchema<span class="token operator">:</span> $TSObject<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>keySchema<span class="token punctuation">.</span>KeyType <span class="token operator">===</span> <span class="token string">\'HASH\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              gsiValue<span class="token punctuation">.</span>partitionKey <span class="token operator">=</span> <span class="token punctuation">{</span>\n                fieldName<span class="token operator">:</span> keySchema<span class="token punctuation">.</span>AttributeName<span class="token punctuation">,</span>\n                fieldType<span class="token operator">:</span> <span class="token function">getType</span><span class="token punctuation">(</span>oldCFN<span class="token punctuation">.</span>Resources<span class="token punctuation">.</span>DynamoDBTable<span class="token punctuation">.</span>Properties<span class="token punctuation">.</span>AttributeDefinitions<span class="token punctuation">,</span> keySchema<span class="token punctuation">.</span>AttributeName<span class="token punctuation">)</span><span class="token punctuation">,</span>\n              <span class="token punctuation">}</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n              gsiValue<span class="token punctuation">.</span>sortKey <span class="token operator">=</span> <span class="token punctuation">{</span>\n                fieldName<span class="token operator">:</span> keySchema<span class="token punctuation">.</span>AttributeName<span class="token punctuation">,</span>\n                fieldType<span class="token operator">:</span> <span class="token function">getType</span><span class="token punctuation">(</span>oldCFN<span class="token punctuation">.</span>Resources<span class="token punctuation">.</span>DynamoDBTable<span class="token punctuation">.</span>Properties<span class="token punctuation">.</span>AttributeDefinitions<span class="token punctuation">,</span> keySchema<span class="token punctuation">.</span>AttributeName<span class="token punctuation">)</span><span class="token punctuation">,</span>\n              <span class="token punctuation">}</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        gsi<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>gsiValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    cliInputs <span class="token operator">=</span> <span class="token punctuation">{</span>\n      resourceName<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_resourceName<span class="token punctuation">,</span>\n      tableName<span class="token operator">:</span> oldParameters<span class="token punctuation">.</span>tableName<span class="token punctuation">,</span>\n      partitionKey<span class="token punctuation">,</span>\n      sortKey<span class="token punctuation">,</span>\n      triggerFunctions<span class="token punctuation">,</span>\n      gsi<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveCliInputPayload</span><span class="token punctuation">(</span>cliInputs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Remove old files</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>oldCFNFilepath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      fs<span class="token punctuation">.</span><span class="token function">removeSync</span><span class="token punctuation">(</span>oldCFNFilepath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>oldParametersFilepath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      fs<span class="token punctuation">.</span><span class="token function">removeSync</span><span class="token punctuation">(</span>oldParametersFilepath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>oldStorageParamsFilepath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      fs<span class="token punctuation">.</span><span class="token function">removeSync</span><span class="token punctuation">(</span>oldStorageParamsFilepath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"マイグレーションを実行すると次に、",p.createElement(a.code,null,"DDBStackTransform.transform()"),"関数を呼び出しています。\n",p.createElement(a.code,null,"transform()"),"関数では、",p.createElement(a.code,null,"cli-input.json"),"から Cfn テンプレートファイル(",p.createElement(a.code,null,"cloudformation.json"),")とパラメータファイル(",p.createElement(a.code,null,"parameters.json"),")を生成しています。\n",p.createElement(a.code,null,"applyOverrides"),"関数を呼び出してユーザーがオーバーライドした内容(",p.createElement(a.code,null,"override.ts"),")をスタックに適用する処理も実行されます。\nただし、この時点では",p.createElement(a.code,null,"override.ts"),"はまだ存在していないので何もオーバーライドされるものはありません。"),"\n",p.createElement(a.p,null,p.createElement(a.a,{href:"https://github.com/aws-amplify/amplify-cli/blob/b3ca83b9bec986f0fd525d46738b277eb93e4384/packages/amplify-category-storage/src/provider-utils/awscloudformation/cdk-stack-builder/s3-stack-transform.ts#L60-L70"},"amplify-category-storage/src/provider-utils/awscloudformation/cdk-stack-builder/s3-stack-transform.ts#L60-L70"),":"),"\n",p.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts">  <span class="token keyword">async</span> <span class="token function">transform</span><span class="token punctuation">(</span>commandType<span class="token operator">:</span> CLISubCommandType<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">generateCfnInputParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// Generate cloudformation stack from cli-inputs.json</span>\n    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">generateStack</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Modify cloudformation files based on overrides</span>\n    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">applyOverrides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Save generated cloudformation.json and parameters.json files</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveBuildFiles</span><span class="token punctuation">(</span>commandType<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"最後に、",p.createElement(a.code,null,"generateOverrideSkeleton"),"関数の呼び出しです。",p.createElement(a.code,null,"generateOverrideSkeleton"),"関数はオーバーライドを利用する場合に必要な",p.createElement(a.code,null,"tsconfig.json"),"や",p.createElement(a.code,null,"override.ts"),"ファイルの生成してくれる関数です。\nプラグインでオーバーライドを実装する場合も、この関数を適切な引数で呼び出せば良さそうです。"),"\n",p.createElement(a.p,null,"ここまで見てきた内容を踏まえると ",p.createElement(a.code,null,"amplify overide <category>")," コマンドは実装できそうです。"),"\n",p.createElement(a.h3,{id:"amplify-push-の実装を見る"},p.createElement(a.code,null,"amplify push")," の実装を見る"),"\n",p.createElement(a.p,null,"次に、",p.createElement(a.code,null,"amplify push")," を実行したときに CDK オーバーライド（",p.createElement(a.code,null,"override.ts"),"）のコードがどのように反映されてデプロイされるのか見てみます。\n",p.createElement(a.code,null,"amplify push"),"を実行すると ",p.createElement(a.code,null,"amplify-cli/src/extensions/amplify-helpers/push-resources.ts")," の ",p.createElement(a.code,null,"pushResource"),"関数が呼び出されます。"),"\n",p.createElement(a.h4,{id:"overridetsのビルドと-cfn-テンプレートファイル生成"},p.createElement(a.code,null,"override.ts"),"のビルドと Cfn テンプレートファイル生成"),"\n",p.createElement(a.p,null,p.createElement(a.code,null,"pushResource"),"関数の中に以下のコードがあり、",p.createElement(a.code,null,"context.amplify.executeProviderUtils(context, 'awscloudformation', 'buildOverrides', {...})"),"を呼び出しています。\nここで Cfn テンプレートが生成されているようです。"),"\n",p.createElement(a.p,null,p.createElement(a.a,{href:"https://github.com/aws-amplify/amplify-cli/blob/b3ca83b9bec986f0fd525d46738b277eb93e4384/packages/amplify-cli/src/extensions/amplify-helpers/push-resources.ts#L57-L63"},"amplify-cli/src/extensions/amplify-helpers/push-resources.ts#L57-L63"),":"),"\n",p.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts">  <span class="token comment">// building all CFN stacks here to get the resource Changes</span>\n  <span class="token keyword">await</span> <span class="token function">generateDependentResourcesType</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> resourcesToBuild<span class="token operator">:</span> IAmplifyResource<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getResources</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> context<span class="token punctuation">.</span>amplify<span class="token punctuation">.</span><span class="token function">executeProviderUtils</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">\'awscloudformation\'</span><span class="token punctuation">,</span> <span class="token string">\'buildOverrides\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    resourcesToBuild<span class="token punctuation">,</span>\n    forceCompile<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,p.createElement(a.code,null,"context.amplify.executeProviderUtils(context, 'awscloudformation', 'buildOverrides', {...})"),"を呼び出すと以下に示す関数が順次呼び出されていきます。"),"\n",p.createElement(a.ol,null,"\n",p.createElement(a.li,null,p.createElement(a.a,{href:"https://github.com/aws-amplify/amplify-cli/blob/b3ca83b9bec986f0fd525d46738b277eb93e4384/packages/amplify-provider-awscloudformation/src/utility-functions.js#L66-L75"},"amplify-provider-awscloudformation/src/utility-functions.js#L66-L75"),":"),"\n"),"\n",p.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts">  <span class="token comment">/**\n   * Utility function to build resource CFN with overrides\n   * Resources to build are passed with options\n   */</span>\n  <span class="token function-variable function">buildOverrides</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> resource <span class="token keyword">of</span> options<span class="token punctuation">.</span>resourcesToBuild<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">await</span> <span class="token function">transformResourceWithOverrides</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">await</span> <span class="token function">transformResourceWithOverrides</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"ここでリソース毎に",p.createElement(a.code,null,"transformResourceWithOverrides"),"関数を呼び出しています。"),"\n",p.createElement(a.ol,{start:"2"},"\n",p.createElement(a.li,null,p.createElement(a.a,{href:"https://github.com/aws-amplify/amplify-cli/blob/b3ca83b9bec986f0fd525d46738b277eb93e4384/packages/amplify-provider-awscloudformation/src/override-manager/transform-resource.ts#L16-L66"},"amplify-provider-awscloudformation/src/override-manager/transform-resource.ts#L16-L66"),":"),"\n"),"\n",p.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">transformResourceWithOverrides</span><span class="token punctuation">(</span>context<span class="token operator">:</span> $TSContext<span class="token punctuation">,</span> resource<span class="token operator">?</span><span class="token operator">:</span> IAmplifyResource<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> flags <span class="token operator">=</span> context<span class="token punctuation">.</span>parameters<span class="token punctuation">.</span>options<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> spinner<span class="token operator">:</span> ora<span class="token punctuation">.</span>Ora<span class="token punctuation">;</span>\n\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>resource<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> transformCategoryStack <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">@aws-amplify/amplify-category-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>resource<span class="token punctuation">.</span>category<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>transformCategoryStack<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        spinner <span class="token operator">=</span> <span class="token function">ora</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Building resource </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>resource<span class="token punctuation">.</span>category<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>resource<span class="token punctuation">.</span>resourceName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        spinner<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">await</span> <span class="token function">transformCategoryStack</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        FeatureFlags<span class="token punctuation">.</span><span class="token function">ensureFeatureFlag</span><span class="token punctuation">(</span><span class="token string">\'project\'</span><span class="token punctuation">,</span> <span class="token string">\'overrides\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        spinner<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        printer<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">\'Overrides functionality is not implemented for this category\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// old app -> migrate project must transform -> change detected</span>\n      <span class="token comment">// new app -> just initialized project no transform -> no change detected</span>\n      <span class="token comment">// new app -> just pushed project {</span>\n      <span class="token comment">//  overrides enabled : transform -> change detected</span>\n      <span class="token comment">//  override disabled : no transform -> No change detected</span>\n      <span class="token comment">//}</span>\n\n      <span class="token comment">// RootStack deployed to backend/awscloudformation/build</span>\n      <span class="token keyword">const</span> projectRoot <span class="token operator">=</span> pathManager<span class="token punctuation">.</span><span class="token function">findProjectRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> rootStackBackendBuildDir <span class="token operator">=</span> pathManager<span class="token punctuation">.</span><span class="token function">getRootStackBuildDirPath</span><span class="token punctuation">(</span>projectRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      fs<span class="token punctuation">.</span><span class="token function">ensureDirSync</span><span class="token punctuation">(</span>rootStackBackendBuildDir<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> rootStackBackendFilePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>rootStackBackendBuildDir<span class="token punctuation">,</span> rootStackFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isMigrateProject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//old App</span>\n        <span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">transformRootStack</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">await</span> <span class="token function">prePushCfnTemplateModifier</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        JSONUtilities<span class="token punctuation">.</span><span class="token function">writeJson</span><span class="token punctuation">(</span>rootStackBackendFilePath<span class="token punctuation">,</span> template<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRootOverrideFileModifiedSinceLastPush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// new App before push</span>\n          <span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">transformRootStack</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">await</span> <span class="token function">prePushCfnTemplateModifier</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          JSONUtilities<span class="token punctuation">.</span><span class="token function">writeJson</span><span class="token punctuation">(</span>rootStackBackendFilePath<span class="token punctuation">,</span> template<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>spinner<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      spinner<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,p.createElement(a.code,null,"transformResourceWithOverrides"),"関数では指定されたリソースのカテゴリープラグインが実装する",p.createElement(a.code,null,"transformCategoryStack"),"関数を呼び出しています。"),"\n",p.createElement(a.ol,{start:"3"},"\n",p.createElement(a.li,null,p.createElement(a.a,{href:"https://github.com/aws-amplify/amplify-cli/blob/b3ca83b9bec986f0fd525d46738b277eb93e4384/packages/amplify-category-storage/src/index.ts#L115-L124"},"amplify-category-storage/src/index.ts#L115-L124"),":"),"\n"),"\n",p.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">transformCategoryStack</span><span class="token punctuation">(</span>context<span class="token operator">:</span> $TSContext<span class="token punctuation">,</span> resource<span class="token operator">:</span> IAmplifyResource<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>resource<span class="token punctuation">.</span>service <span class="token operator">===</span> AmplifySupportedService<span class="token punctuation">.</span><span class="token constant">DYNAMODB</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">canResourceBeTransformed</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span>resourceName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> stackGenerator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DDBStackTransform</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span>resourceName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">await</span> stackGenerator<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>resource<span class="token punctuation">.</span>service <span class="token operator">===</span> AmplifySupportedService<span class="token punctuation">.</span><span class="token constant">S3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">await</span> <span class="token function">transformS3ResourceStack</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,p.createElement(a.code,null,"amplify-category-storage"),"の",p.createElement(a.code,null,"transformCategoryStack"),"関数は DynamoDB のリソースであれば",p.createElement(a.code,null,"DDBStackTransform.transform()"),"関数を呼び出しています。\nこの",p.createElement(a.code,null,"transform"),"関数はマイグレーションの処理でも呼び出されていましたね。この関数で呼びだされる",p.createElement(a.code,null,"applyOverrides"),"関数で",p.createElement(a.code,null,"override.ts"),"の内容でスタックを上書きしています。次で詳細を見てみましょう。"),"\n",p.createElement(a.ol,{start:"4"},"\n",p.createElement(a.li,null,p.createElement(a.a,{href:"https://github.com/aws-amplify/amplify-cli/blob/b3ca83b9bec986f0fd525d46738b277eb93e4384/packages/amplify-category-storage/src/provider-utils/awscloudformation/cdk-stack-builder/ddb-stack-transform.ts#L173-L215"},"amplify-category-storage/src/provider-utils/awscloudformation/cdk-stack-builder/ddb-stack-transform.ts#L173-L215"),":"),"\n"),"\n",p.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts">  <span class="token keyword">async</span> <span class="token function">applyOverrides</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> backendDir <span class="token operator">=</span> pathManager<span class="token punctuation">.</span><span class="token function">getBackendDirPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> resourceDirPath <span class="token operator">=</span> pathManager<span class="token punctuation">.</span><span class="token function">getResourceDirectoryPath</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token string">\'storage\'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_resourceName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> overrideJSFilePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>resourceDirPath<span class="token punctuation">,</span> <span class="token string">\'build\'</span><span class="token punctuation">,</span> <span class="token string">\'override.js\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> isBuild <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">buildOverrideDir</span><span class="token punctuation">(</span>backendDir<span class="token punctuation">,</span> resourceDirPath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>error <span class="token operator">=></span> <span class="token punctuation">{</span>\n      printer<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Build error : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// skip if packageManager or override.ts not found</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>isBuild<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> override <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span>overrideJSFilePath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>error <span class="token operator">=></span> <span class="token punctuation">{</span>\n        formatter<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'No override File Found\'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">To override </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>_resourceName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> run amplify override auth </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>_resourceName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> override <span class="token operator">===</span> <span class="token string">\'function\'</span> <span class="token operator">&amp;&amp;</span> override<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> overrideCode<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>overrideJSFilePath<span class="token punctuation">,</span> <span class="token string">\'utf-8\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n          formatter<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'No override File Found\'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">To override </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>_resourceName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> run amplify override auth</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">return</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">const</span> sandboxNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">vm</span><span class="token punctuation">.</span><span class="token function">NodeVM</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          <span class="token builtin">console</span><span class="token operator">:</span> <span class="token string">\'inherit\'</span><span class="token punctuation">,</span>\n          timeout<span class="token operator">:</span> <span class="token number">5000</span><span class="token punctuation">,</span>\n          sandbox<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token keyword">require</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            context<span class="token operator">:</span> <span class="token string">\'sandbox\'</span><span class="token punctuation">,</span>\n            builtin<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'path\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n            external<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n          <span class="token keyword">await</span> sandboxNode<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>overrideCode<span class="token punctuation">,</span> overrideJSFilePath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">override</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_resourceTemplateObj <span class="token keyword">as</span> AmplifyDDBResourceTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token operator">:</span> $TSAny<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">const</span> error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Skipping override due to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>err<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>os<span class="token punctuation">.</span><span class="token constant">EOL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          printer<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          error<span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n          <span class="token keyword">throw</span> error<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,p.createElement(a.code,null,"buildOverrideDir"),"関数で",p.createElement(a.code,null,"override.ts"),"をビルドして",p.createElement(a.code,null,"override.js"),"を出力します。ビルドされたら",p.createElement(a.code,null,"new vm.NodeVM({...})"),"で作成した Node.js のサンドボックス環境内で",p.createElement(a.code,null,"override"),"関数を呼び出してユーザーが定義したオーバーライドの内容をスタックに反映します。"),"\n",p.createElement(a.ol,{start:"5"},"\n",p.createElement(a.li,null,p.createElement(a.a,{href:"https://github.com/aws-amplify/amplify-cli/blob/b3ca83b9bec986f0fd525d46738b277eb93e4384/packages/amplify-category-storage/src/provider-utils/awscloudformation/cdk-stack-builder/ddb-stack-transform.ts#L217-L239"},"amplify-category-storage/src/provider-utils/awscloudformation/cdk-stack-builder/ddb-stack-transform.ts#L217-L239"),":"),"\n"),"\n",p.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts">  <span class="token function">saveBuildFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_resourceTemplateObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>_cfn <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_resourceTemplateObj<span class="token punctuation">.</span><span class="token function">renderCloudFormationTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// store files in local-filesysten</span>\n\n    fs<span class="token punctuation">.</span><span class="token function">ensureDirSync</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_cliInputsState<span class="token punctuation">.</span>buildFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> cfnFilePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_cliInputsState<span class="token punctuation">.</span>buildFilePath<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>_resourceName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-cloudformation-template.json</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      JSONUtilities<span class="token punctuation">.</span><span class="token function">writeJson</span><span class="token punctuation">(</span>cfnFilePath<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_cfn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    fs<span class="token punctuation">.</span><span class="token function">ensureDirSync</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_cliInputsState<span class="token punctuation">.</span>buildFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> cfnInputParamsFilePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_cliInputsState<span class="token punctuation">.</span>buildFilePath<span class="token punctuation">,</span> <span class="token string">\'parameters.json\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      JSONUtilities<span class="token punctuation">.</span><span class="token function">writeJson</span><span class="token punctuation">(</span>cfnInputParamsFilePath<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_cfnInputParams<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,p.createElement(a.code,null,"DDBStackTransform.transform()"),"関数は",p.createElement(a.code,null,"applyOverrides"),"関数の後に",p.createElement(a.code,null,"saveBuildFiles"),"関数を呼び出して、オーバーライドの内容を反映したスタックから Cfn のテンプレートをファイル出力します。同時に",p.createElement(a.code,null,"parameters.json"),"も出力します。"),"\n",p.createElement(a.p,null,"ここまでで、",p.createElement(a.code,null,"amplify push"),"を実行したときに",p.createElement(a.code,null,"override.ts"),"がどうビルド・反映されて Cfn テンプレートが生成されるのか把握できました。\nプラグインでこの仕組みを実装する場合、問題になる箇所があります。それは、以下のカテゴリープラグインが実装する",p.createElement(a.code,null,"transformCategoryStack"),"関数を取得する部分です。"),"\n",p.createElement(a.p,null,p.createElement(a.a,{href:"https://github.com/aws-amplify/amplify-cli/blob/b3ca83b9bec986f0fd525d46738b277eb93e4384/packages/amplify-provider-awscloudformation/src/override-manager/transform-resource.ts#L22"},"amplify-provider-awscloudformation/src/override-manager/transform-resource.ts#L22"),":"),"\n",p.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts">      <span class="token keyword">const</span> <span class="token punctuation">{</span> transformCategoryStack <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">@aws-amplify/amplify-category-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>resource<span class="token punctuation">.</span>category<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"インポートするプラグインが",p.createElement(a.code,null,"@aws-amplify/amplify-category-"),"で始まるものに限定されています。つまり、公式プラグインのみを対象にしています。\n",p.createElement(a.code,null,"transformCategoryStack"),p.createElement(a.div,{dangerouslySetInnerHTML:{__html:'関数を実装してもプラグイン側からその関数を amplify-cli 側に提供できないということです。<span role="img" aria-label="crying face">😢</span>'}})),"\n",p.createElement(a.h3,{id:"実装に向けた活動"},"実装に向けた活動"),"\n",p.createElement(a.p,null,"このままでは、サードパーティのプラグインで Amplify CLI が提供している CDK オーバーライドと同じ仕組みに乗っかって機能提供するのは難しそうなのでの GitHub の amplify-cli リポジトリで Issue を出しました。"),"\n",p.createElement(a.p,null,p.createElement(a.div,{dangerouslySetInnerHTML:{__html:"<a class='gatsby-remark-link-unfurl__container' href='https:&#x2F;&#x2F;github.com&#x2F;aws-amplify&#x2F;amplify-cli&#x2F;issues&#x2F;9226' target='_blank' title='Allow third-party plugins to support CDK overrides · Issue #9226 · aws-amplify&#x2F;amplify-cli'>\n    <div class='gatsby-remark-link-unfurl__media' style='background-image: url(https:&#x2F;&#x2F;opengraph.githubassets.com&#x2F;325c757178a6fc863e3aa08b39d4911f69c62e83cb623d328aa193d9f30155d3&#x2F;aws-amplify&#x2F;amplify-cli&#x2F;issues&#x2F;9226'></div>\n    <div class='gatsby-remark-link-unfurl__content'>\n      <header class='gatsby-remark-link-unfurl__title'><p  title='Allow third-party plugins to support CDK overrides · Issue #9226 · aws-amplify&#x2F;amplify-cli'>Allow third-party plugins to support CDK overrides · Issue #9226 · aws-amplify&#x2F;amplify-cli</p></header>\n      <div class='gatsby-remark-link-unfurl__description'><p title='Is this feature request related to a new or existing Amplify category? New category Is this related to another service? No response Describe the feature you&amp;#39;d like to request Now, amplify c...'>Is this feature request related to a new or existing Amplify category? New category Is this related to another service? No response Describe the feature you&amp;#39;d like to request Now, amplify c...</p></div>\n      <footer><p title='GitHub'>GitHub</p><span title='GitHub' style='background-image: url(https:&#x2F;&#x2F;github.githubassets.com&#x2F;favicons&#x2F;favicon.svg); background-repeat: no-repeat; background-position: center center;'></span></footer>\n    </div>\n    </a>\n  "}})),"\n",p.createElement(a.p,null,"今後は、サードパーティのプラグインで CDK オーバーライドが実装できるように、この Issue への Pull Request も出していきたいと思います。"),"\n",p.createElement(a.section,{"data-footnotes":!0,className:"footnotes"},p.createElement(a.h2,{className:"sr-only",id:"footnote-label"},"脚注"),"\n",p.createElement(a.ol,null,"\n",p.createElement(a.li,{id:"user-content-fn-1"},"\n",p.createElement(a.p,null,p.createElement(a.a,{href:"https://qiita.com/dyson-udonsin/items/5d2b7105736bf8a742c4"},"AWS Amplify Advent Calendar 2021 16 日目の記事"),"で紹介いただいたプラグインです。 ",p.createElement(a.a,{href:"#user-content-fnref-1","data-footnote-backref":!0,className:"data-footnote-backref","aria-label":"Back to content"},"↩")),"\n"),"\n",p.createElement(a.li,{id:"user-content-fn-2"},"\n",p.createElement(a.p,null,"この",p.createElement(a.code,null,"DynamoDBInputState"),"は何かのインタフェースを実装してはいませんが、",p.createElement(a.code,null,"/* Need to move this logic to a base class */")," というコメントが書かれており、\n",p.createElement(a.code,null,"auth"),"カテゴリのソースを見ると同じような役割の",p.createElement(a.code,null,"AuthInputState"),"クラスが",p.createElement(a.code,null,"CategoryInputState"),"クラスを継承しています。\nマイグレーションを実装する場合は、",p.createElement(a.code,null,"CategoryInputState"),"クラスを継承して実装するのが良さそうです。 ",p.createElement(a.a,{href:"#user-content-fnref-2","data-footnote-backref":!0,className:"data-footnote-backref","aria-label":"Back to content"},"↩")),"\n"),"\n",p.createElement(a.li,{id:"user-content-fn-3"},"\n",p.createElement(a.p,null,p.createElement(a.code,null,"cli-input.json"),"について公式ドキュメントには、まだ記載はないようです。このファイルにはユーザーから入力された値を保存しておき、CDK のコードをビルドする際に利用するためのものです。 ",p.createElement(a.a,{href:"#user-content-fnref-3","data-footnote-backref":!0,className:"data-footnote-backref","aria-label":"Back to content"},"↩")),"\n"),"\n"),"\n"))}var c=function(n){void 0===n&&(n={});var a=Object.assign({},(0,e.ah)(),n.components).wrapper;return a?p.createElement(a,n,p.createElement(o,n)):o(n)},l=s(1597),u=s(8771),i=s(5297),r=s(746),k=["data"],d=function(n){var a=n.data,s=(0,t.Z)(n,k),e=a.mdx;return p.createElement(r.F,Object.assign({data:a,title:e.frontmatter.title,description:e.frontmatter.description||e.excerpt},s))},m=function(n){var a,s=n.data,t=n.location,e=n.children,o=s.mdx,c=(null===(a=s.site.siteMetadata)||void 0===a?void 0:a.title)||"Title",r=s.previous,k=s.next;return p.createElement(i.Z,{location:t,title:c},p.createElement("article",{className:"blog-post",itemScope:!0,itemType:"http://schema.org/Article"},p.createElement("header",null,p.createElement("h1",{itemProp:"headline"},o.frontmatter.title),p.createElement("p",null,o.frontmatter.date)),e,p.createElement("hr"),p.createElement("footer",null,p.createElement(u.Z))),p.createElement("nav",{className:"blog-post-nav"},p.createElement("ul",{style:{display:"flex",flexWrap:"wrap",justifyContent:"space-between",listStyle:"none",padding:0}},p.createElement("li",null,r&&p.createElement(l.Link,{to:r.fields.slug,rel:"prev"}," ← ",r.frontmatter.title)),p.createElement("li",null,k&&p.createElement(l.Link,{to:k.fields.slug,rel:"next"},k.frontmatter.title," →")))))};function f(n){return p.createElement(m,n,p.createElement(c,n))}},3366:function(n,a,s){function t(n,a){if(null==n)return{};var s,t,e={},p=Object.keys(n);for(t=0;t<p.length;t++)s=p[t],a.indexOf(s)>=0||(e[s]=n[s]);return e}s.d(a,{Z:function(){return t}})}}]);
//# sourceMappingURL=component---src-templates-blog-post-js-content-file-path-home-runner-work-fossamagna-github-io-fossamagna-github-io-content-blog-anatomy-of-amplify-override-index-mdx-74dfee638b99e0616595.js.map