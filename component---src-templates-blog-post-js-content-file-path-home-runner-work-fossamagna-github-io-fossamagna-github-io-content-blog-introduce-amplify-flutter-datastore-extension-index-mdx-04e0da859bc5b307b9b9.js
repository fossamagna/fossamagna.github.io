"use strict";(self.webpackChunkfossamagna_github_io=self.webpackChunkfossamagna_github_io||[]).push([[43],{1336:function(n,a,s){s.r(a),s.d(a,{Head:function(){return d},default:function(){return g}});var t=s(3366),e=s(6410),p=s(7294);function o(n){var a=Object.assign({p:"p",a:"a",code:"code",div:"div"},(0,e.ah)(),n.components);return p.createElement(p.Fragment,null,p.createElement(a.p,null,"この記事は ",p.createElement(a.a,{href:"https://qiita.com/advent-calendar/2023/amplify"},"AWS Amplify と AWS× フロントエンド #AWSAmplifyJP Advent Calendar 2023"),"、",p.createElement(a.a,{href:"https://qiita.com/advent-calendar/2023/aws-community-builders"},"AWS Community Builders Advent Calendar 2023")," の 6 日目の記事です。"),"\n",p.createElement(a.p,null,"最近、Amplify & Flutter でモバイルアプリ開発をしています。\n",p.createElement(a.a,{href:"https://docs.amplify.aws/flutter/build-a-backend/more-features/datastore/"},"Amplify DataStore")," を使っているのですが、Amplify DataStore ってもう少し使いやすい API があるといいなと思っていました。"),"\n",p.createElement(a.p,null,"例えば、次のような ",p.createElement(a.code,null,"Todo")," モデルを定義して、ID 指定で単一のレコードを取得する場合、"),"\n",p.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="graphql"><pre class="language-graphql"><code class="language-graphql"><span class="token keyword">type</span> <span class="token class-name">Todo</span> <span class="token directive function">@model</span> <span class="token punctuation">{</span>\n  <span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token scalar">ID</span><span class="token operator">!</span>\n  <span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token scalar">String</span><span class="token operator">!</span>\n  <span class="token attr-name">description</span><span class="token punctuation">:</span> <span class="token scalar">String</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"DataStore の API では以下のように書きます。"),"\n",p.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="dart"><pre class="language-dart"><code class="language-dart"><span class="token keyword">final</span> id <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"080f33bf-0362-4c7f-9dfa-de64fc231dca"</span></span><span class="token punctuation">;</span>\n<span class="token keyword">final</span> todo <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">Amplify.DataStore</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>\n  <span class="token class-name">Todo</span><span class="token punctuation">.</span>classType<span class="token punctuation">,</span>\n  where<span class="token punctuation">:</span> <span class="token class-name">Todo</span><span class="token punctuation">.</span>MODEL_IDENTIFIER<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">TodoModelIdentifier</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> list<span class="token punctuation">.</span>single<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"ID 指定でレコードを 1 件取得するのにはちょっと、コード量が多いなと思います。\nID を指定しているので一意に決まるはずですが、DataStore では単一レコードを取得する API 自体がないので ",p.createElement(a.code,null,"query")," メソッドで条件にあうレコードをリストで取得してから ",p.createElement(a.code,null,"list.single")," のようにしてリストから単一レコードに変換が必要です。"),"\n",p.createElement(a.p,null,"希望としては、以下のように ",p.createElement(a.code,null,"getTodo")," のようなメソッドがあると便利だなと思います。"),"\n",p.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="dart"><pre class="language-dart"><code class="language-dart"><span class="token keyword">final</span> id <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"080f33bf-0362-4c7f-9dfa-de64fc231dca"</span></span><span class="token punctuation">;</span>\n<span class="token keyword">final</span> todo <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">Amplify.DataStore</span><span class="token punctuation">.</span><span class="token function">getTodo</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"一覧画面でリストで表示して、ユーザーの選択に応じてその 1 件を詳細画面で表示するようなケースなどの詳細画面では ID 指定で取得するユースケースはよくあると思います。"),"\n",p.createElement(a.p,null,"そこで、こういったメソッドを生成する ",p.createElement(a.a,{href:"https://github.com/fossamagna/amplify-flutter-datastore-extension"},"amplify-flutter-datastore-extension")," という Amplify プラグインを作成しました。"),"\n",p.createElement(a.p,null,"Amplify プラグインなので、以下のように npm でインストールして使います。"),"\n",p.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="sh"><pre class="language-sh"><code class="language-sh"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> amplify-flutter-datastore-extension\namplify plugin <span class="token function">add</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">npm</span> root <span class="token parameter variable">-g</span><span class="token variable">)</span></span>/amplify-flutter-datastore-extension</code></pre></div>'}}),"\n",p.createElement(a.p,null,"インストールしたら、いつものように通常の Amplify DataStore のモデルコードの生成を実行するだけです。"),"\n",p.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="sh"><pre class="language-sh"><code class="language-sh">amplify codegen models</code></pre></div>'}}),"\n",p.createElement(a.p,null,"そうすると",p.createElement(a.code,null,"DataStoreExtension.dart"),"というファイルを生成します。\nファイルは、Amplify.DataStore の extension になっています。"),"\n",p.createElement(a.p,null,"例えば、最初の Todo モデルの場合は以下のような内容でファイルが生成されます。"),"\n",p.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="dart"><pre class="language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">\'ModelProvider.dart\'</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">\'package:amplify_core/amplify_core.dart\'</span></span> <span class="token operator">as</span> amplify_core<span class="token punctuation">;</span>\n\n<span class="token comment">/** This is an auto generated extension representing the Todo type in your schema. */</span>\n<span class="token keyword">extension</span> <span class="token class-name">TodoExtension</span> <span class="token keyword">on</span> <span class="token class-name"><span class="token namespace">amplify_core<span class="token punctuation">.</span></span>DataStoreCategory</span> <span class="token punctuation">{</span>\n  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Todo</span><span class="token punctuation">></span></span> <span class="token function">getTodo</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>\n      <span class="token class-name">Todo</span><span class="token punctuation">.</span>classType<span class="token punctuation">,</span>\n      where<span class="token punctuation">:</span> <span class="token class-name">Todo</span><span class="token punctuation">.</span>MODEL_IDENTIFIER<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">TodoModelIdentifier</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> list<span class="token punctuation">.</span>single<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Todo</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">getTodoOrNull</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>\n      <span class="token class-name">Todo</span><span class="token punctuation">.</span>classType<span class="token punctuation">,</span>\n      where<span class="token punctuation">:</span> <span class="token class-name">Todo</span><span class="token punctuation">.</span>MODEL_IDENTIFIER<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">TodoModelIdentifier</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> list<span class="token punctuation">.</span>singleOrNull<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"ファイルが生成されたら、以下のような呼び出しが可能になります。"),"\n",p.createElement(a.div,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="dart"><pre class="language-dart"><code class="language-dart"><span class="token keyword">final</span> id <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"080f33bf-0362-4c7f-9dfa-de64fc231dca"</span></span><span class="token punctuation">;</span>\n<span class="token keyword">final</span> todo <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">Amplify.DataStore</span><span class="token punctuation">.</span><span class="token function">getTodo</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"コード量も減ってスッキリしたと思います。Flutter で Amplify DataStore を使っている方はぜひ利用してもらいたいと思います。Issue や GitHub スターなどフィードバックをいただけると励みになります。"))}var l=function(n){void 0===n&&(n={});var a=Object.assign({},(0,e.ah)(),n.components).wrapper;return a?p.createElement(a,n,p.createElement(o,n)):o(n)},c=s(1597),i=s(8771),u=s(5297),r=s(746),k=["data"],d=function(n){var a=n.data,s=(0,t.Z)(n,k),e=a.mdx;return p.createElement(r.F,Object.assign({data:a,title:e.frontmatter.title,description:e.frontmatter.description||e.excerpt},s))},m=function(n){var a,s=n.data,t=n.location,e=n.children,o=s.mdx,l=(null===(a=s.site.siteMetadata)||void 0===a?void 0:a.title)||"Title",r=s.previous,k=s.next;return p.createElement(u.Z,{location:t,title:l},p.createElement("article",{className:"blog-post",itemScope:!0,itemType:"http://schema.org/Article"},p.createElement("header",null,p.createElement("h1",{itemProp:"headline"},o.frontmatter.title),p.createElement("p",null,o.frontmatter.date)),e,p.createElement("hr"),p.createElement("footer",null,p.createElement(i.Z))),p.createElement("nav",{className:"blog-post-nav"},p.createElement("ul",{style:{display:"flex",flexWrap:"wrap",justifyContent:"space-between",listStyle:"none",padding:0}},p.createElement("li",null,r&&p.createElement(c.Link,{to:r.fields.slug,rel:"prev"}," ← ",r.frontmatter.title)),p.createElement("li",null,k&&p.createElement(c.Link,{to:k.fields.slug,rel:"next"},k.frontmatter.title," →")))))};function g(n){return p.createElement(m,n,p.createElement(l,n))}},3366:function(n,a,s){function t(n,a){if(null==n)return{};var s,t,e={},p=Object.keys(n);for(t=0;t<p.length;t++)s=p[t],a.indexOf(s)>=0||(e[s]=n[s]);return e}s.d(a,{Z:function(){return t}})}}]);
//# sourceMappingURL=component---src-templates-blog-post-js-content-file-path-home-runner-work-fossamagna-github-io-fossamagna-github-io-content-blog-introduce-amplify-flutter-datastore-extension-index-mdx-04e0da859bc5b307b9b9.js.map